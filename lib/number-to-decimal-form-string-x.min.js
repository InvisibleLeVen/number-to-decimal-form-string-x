!function(f){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=f();else if("function"==typeof define&&define.amd)define([],f);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).returnExports=f()}}(function(){return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a="function"==typeof require&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n||e)},l,l.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(_dereq_,module,exports){/**
 * @file Convert a base-10 or scientific E-notation value to a decimal form string.
 * @version 1.0.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module number-to-decimal-form-string-x
 */
"use strict";var castNumber=_dereq_("cached-constructors-x").Number,toStr=_dereq_("to-string-x"),charAt="".charAt,slice="".slice,search="".search,replace="".replace,indexOf="".indexOf,join=[].join,isValid=/^-?(?:(?:\d|[1-9]\d*)(?:\.\d+)?)(?:e[+-]?\d+)?$/i,test=isValid.test;module.exports=function toDecimalFormString(value){var workingValue=value;if(0===workingValue&&1/workingValue<0)workingValue="-0";else if(workingValue=toStr(workingValue),!1===test.call(isValid,workingValue))throw new TypeError("not a valid base 10 numeric value");var sign;"-"===charAt.call(workingValue,0)?(workingValue=slice.call(workingValue,1),sign=-1):sign=1;var pointIndex=indexOf.call(workingValue,".");pointIndex>-1&&(workingValue=replace.call(workingValue,".",""));var exponentIndex=pointIndex,index=search.call(workingValue,/e/i);index>0?(exponentIndex<0&&(exponentIndex=index),exponentIndex+=castNumber(slice.call(workingValue,index+1)),workingValue=slice.call(workingValue,0,index)):exponentIndex<0&&(exponentIndex=workingValue.length);var leadingZeroIndex=workingValue.length;for(index=0;index<leadingZeroIndex&&"0"===charAt.call(workingValue,index);)index+=1;var coefficient,exponent;if(index===leadingZeroIndex)exponent=0,coefficient=[0];else{if(leadingZeroIndex>0)do{leadingZeroIndex-=1}while("0"===charAt.call(workingValue,leadingZeroIndex)&&leadingZeroIndex>0);exponent=exponentIndex-index-1,(coefficient=[]).length=leadingZeroIndex+1;for(var position=0;index<=leadingZeroIndex;)coefficient[position]=castNumber(charAt.call(workingValue,index)),position+=1,index+=1}var decimalForm=join.call(coefficient,""),decimalFormLength=decimalForm.length;if(exponent<0){for(exponent+=1;exponent;)decimalForm="0"+decimalForm,exponent+=1;decimalForm="0."+decimalForm}else if(exponent>0)if((exponent+=1)>decimalFormLength)for(exponent-=decimalFormLength;exponent;)decimalForm+="0",exponent-=1;else exponent<decimalFormLength&&(decimalForm=slice.call(decimalForm,0,exponent)+"."+slice.call(decimalForm,exponent));else decimalFormLength>1&&(decimalForm=charAt.call(decimalForm,0)+"."+slice.call(decimalForm,1));return sign<0?"-"+decimalForm:decimalForm}},{"cached-constructors-x":2,"to-string-x":4}],2:[function(_dereq_,module,exports){/**
 * @file Constructors cached from literals.
 * @version 1.0.0
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module cached-constructors-x
 */
"use strict";module.exports={Array:[].constructor,Boolean:(!0).constructor,Number:(0).constructor,Object:{}.constructor,RegExp:/(?:)/.constructor,String:"".constructor}},{}],3:[function(_dereq_,module,exports){"use strict";var toStr=Object.prototype.toString;if("function"==typeof Symbol&&"symbol"==typeof Symbol()){var symToStr=Symbol.prototype.toString,symStringRegex=/^Symbol\(.*\)$/,isSymbolObject=function isSymbolObject(value){return"symbol"==typeof value.valueOf()&&symStringRegex.test(symToStr.call(value))};module.exports=function isSymbol(value){if("symbol"==typeof value)return!0;if("[object Symbol]"!==toStr.call(value))return!1;try{return isSymbolObject(value)}catch(e){return!1}}}else module.exports=function isSymbol(value){return!1}},{}],4:[function(_dereq_,module,exports){/**
 * @file ES6-compliant shim for ToString.
 * @see {@link http://www.ecma-international.org/ecma-262/6.0/#sec-tostring|7.1.12 ToString ( argument )}
 * @version 1.4.2
 * @author Xotic750 <Xotic750@gmail.com>
 * @copyright  Xotic750
 * @license {@link <https://opensource.org/licenses/MIT> MIT}
 * @module to-string-x
 */
"use strict";var castString="".constructor,isSymbol=_dereq_("is-symbol");module.exports=function ToString(value){if(isSymbol(value))throw new TypeError("Cannot convert a Symbol value to a string");return castString(value)}},{"is-symbol":3}]},{},[1])(1)});